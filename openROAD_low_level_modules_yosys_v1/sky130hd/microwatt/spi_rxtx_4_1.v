module spi_rxtx_4_1(clk, rst, clk_div_i, cmd_valid_i, cmd_mode_i, cmd_clks_i, cmd_txd_i, sdat_i, cmd_ready_o, d_rxd_o, d_ack_o, bus_idle_o, sck, sdat_o, sdat_oe);
  wire _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire _04_;
  wire [7:0] _05_;
  wire _06_;
  wire _07_;
  wire [7:0] _08_;
  wire _09_;
  wire [7:0] _10_;
  wire _11_;
  wire _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  reg _20_;
  reg _21_;
  reg [7:0] _22_;
  reg _23_;
  reg _24_;
  reg [7:0] _25_ = 8'h00;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire [2:0] _35_;
  wire _36_;
  wire [2:0] _37_;
  wire _38_;
  reg [2:0] _39_;
  reg _40_ = 1'h0;
  wire _41_;
  wire [2:0] _42_;
  wire [2:0] _43_;
  wire [2:0] _44_;
  wire [2:0] _45_;
  wire [2:0] _46_;
  reg [2:0] _47_;
  wire _48_;
  wire _49_;
  wire [7:0] _50_;
  wire [7:0] _51_;
  wire [7:0] _52_;
  wire [7:0] _53_;
  reg [7:0] _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  reg [3:0] _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  wire _88_;
  wire _89_;
  wire _90_;
  wire _91_;
  wire [7:0] _92_;
  wire [7:0] _93_;
  reg _94_ = 1'h0;
  reg _95_;
  reg _96_ = 1'h0;
  wire [7:0] _97_;
  reg [7:0] _98_ = 8'h00;
  wire [2:0] bit_count;
  output bus_idle_o;
  wire bus_idle_o;
  input clk;
  wire clk;
  wire [7:0] clk_div;
  input [7:0] clk_div_i;
  wire [7:0] clk_div_i;
  input [2:0] cmd_clks_i;
  wire [2:0] cmd_clks_i;
  wire [2:0] cmd_mode;
  input [2:0] cmd_mode_i;
  wire [2:0] cmd_mode_i;
  output cmd_ready_o;
  wire cmd_ready_o;
  input [7:0] cmd_txd_i;
  wire [7:0] cmd_txd_i;
  input cmd_valid_i;
  wire cmd_valid_i;
  output d_ack_o;
  wire d_ack_o;
  output [7:0] d_rxd_o;
  wire [7:0] d_rxd_o;
  wire dat_ack_l;
  wire [3:0] dat_i_l;
  wire end_cmd;
  wire [7:0] ireg;
  wire next_cmd;
  wire [7:0] oreg;
  input rst;
  wire rst;
  output sck;
  wire sck;
  wire sck_0;
  wire sck_1;
  wire [7:0] \sck_gen.counter ;
  wire sck_recv;
  wire sck_recv_d;
  wire sck_send;
  input [3:0] sdat_i;
  wire [3:0] sdat_i;
  output [3:0] sdat_o;
  wire [3:0] sdat_o;
  output [3:0] sdat_oe;
  wire [3:0] sdat_oe;
  wire start_cmd;
  wire state;
  assign _00_ = { 24'h000000, \sck_gen.counter  } == { 24'h000000, clk_div };
  assign _01_ = ~ sck_0;
  assign _02_ = ~ sck_0;
  assign _03_ = { 24'h000000, \sck_gen.counter  } + 32'd1;
  assign _04_ = _00_ ? _01_ : sck_0;
  assign _05_ = _00_ ? clk_div_i : clk_div;
  assign _06_ = _00_ ? sck_0 : 1'h0;
  assign _07_ = _00_ ? _02_ : 1'h0;
  assign _08_ = _00_ ? 8'h00 : _03_[7:0];
  assign _09_ = rst ? 1'h1 : _04_;
  assign _10_ = rst ? 8'h00 : _05_;
  assign _11_ = rst ? 1'h0 : _06_;
  assign _12_ = rst ? 1'h0 : _07_;
  assign _13_ = rst ? 8'h00 : _08_;
  assign _14_ = state == 1'h1;
  assign _15_ = ~ end_cmd;
  assign _16_ = _14_ & _15_;
  assign _17_ = next_cmd & cmd_valid_i;
  assign _18_ = _16_ | _17_;
  assign _19_ = _18_ ? sck_0 : 1'h1;
  always @(posedge clk)
    _20_ <= _09_;
  always @(posedge clk)
    _21_ <= _19_;
  always @(posedge clk)
    _22_ <= _10_;
  always @(posedge clk)
    _23_ <= _11_;
  always @(posedge clk)
    _24_ <= _12_;
  always @(posedge clk)
    _25_ <= _13_;
  assign _26_ = bit_count == 3'h7;
  assign _27_ = sck_send & _26_;
  assign _28_ = _27_ ? 1'h1 : 1'h0;
  assign _29_ = next_cmd & cmd_valid_i;
  assign _30_ = ~ cmd_valid_i;
  assign _31_ = next_cmd & _30_;
  assign _32_ = state == 1'h0;
  assign _33_ = _32_ ? 1'h1 : 1'h0;
  assign _34_ = end_cmd ? 1'h0 : state;
  assign _35_ = start_cmd ? cmd_mode_i : cmd_mode;
  assign _36_ = start_cmd ? 1'h1 : _34_;
  assign _37_ = rst ? 3'h0 : _35_;
  assign _38_ = rst ? 1'h0 : _36_;
  always @(posedge clk)
    _39_ <= _37_;
  always @(posedge clk)
    _40_ <= _38_;
  assign _41_ = state != 1'h1;
  assign _42_ = bit_count - 3'h1;
  assign _43_ = sck_recv ? _42_ : bit_count;
  assign _44_ = _41_ ? 3'h7 : _43_;
  assign _45_ = start_cmd ? cmd_clks_i : _44_;
  assign _46_ = rst ? 3'h0 : _45_;
  always @(posedge clk)
    _47_ <= _46_;
  assign _48_ = ~ cmd_mode[2];
  assign _49_ = cmd_mode[2:1] == 2'h2;
  assign _50_ = _49_ ? { oreg[5:0], 2'h0 } : { oreg[3:0], 4'h0 };
  assign _51_ = _48_ ? { oreg[6:0], 1'h0 } : _50_;
  assign _52_ = sck_send ? _51_ : oreg;
  assign _53_ = start_cmd ? cmd_txd_i : _52_;
  always @(posedge clk)
    _54_ <= _53_;
  assign _55_ = state == 1'h1;
  assign _56_ = cmd_mode[2:1] == 2'h3;
  assign _57_ = 1'h1 & _56_;
  assign _58_ = _57_ & cmd_mode[0];
  assign _59_ = _60_ ? 1'h1 : 1'h0;
  assign _60_ = _55_ & _58_;
  assign _61_ = state == 1'h1;
  assign _62_ = cmd_mode[2:1] == 2'h3;
  assign _63_ = 1'h1 & _62_;
  assign _64_ = _63_ & cmd_mode[0];
  assign _65_ = _66_ ? 1'h1 : 1'h0;
  assign _66_ = _61_ & _64_;
  assign _67_ = state == 1'h1;
  assign _68_ = cmd_mode[2:1] == 2'h2;
  assign _69_ = 1'h1 & _68_;
  assign _70_ = _69_ & cmd_mode[0];
  assign _71_ = _70_ ? 1'h1 : 1'h0;
  assign _72_ = cmd_mode[2:1] == 2'h3;
  assign _73_ = 1'h1 & _72_;
  assign _74_ = _73_ & cmd_mode[0];
  assign _75_ = _74_ ? 1'h1 : _71_;
  assign _76_ = _67_ ? _75_ : 1'h0;
  assign _77_ = state == 1'h1;
  assign _78_ = ~ cmd_mode[2];
  assign _79_ = _78_ | cmd_mode[0];
  assign _80_ = 1'h1 & _79_;
  assign _81_ = _82_ ? 1'h1 : 1'h0;
  assign _82_ = _77_ & _80_;
  always @(negedge clk)
    _83_ <= sdat_i;
  assign _84_ = state == 1'h1;
  assign _85_ = _84_ ? sck_recv : 1'h0;
  assign _86_ = bit_count == 3'h0;
  assign _87_ = _86_ & sck_recv;
  assign _88_ = ~ cmd_mode[0];
  assign _89_ = _87_ ? _88_ : 1'h0;
  assign _90_ = cmd_mode[2:1] == 2'h2;
  assign _91_ = cmd_mode[2:1] == 2'h3;
  assign _92_ = _91_ ? { ireg[3:0], dat_i_l } : { ireg[6:0], dat_i_l[1] };
  assign _93_ = _90_ ? { ireg[5:0], dat_i_l[1:0] } : _92_;
  always @(posedge clk)
    _94_ <= dat_ack_l;
  always @(posedge clk)
    _95_ <= _89_;
  always @(posedge clk)
    _96_ <= _85_;
  assign _97_ = sck_recv_d ? _93_ : ireg;
  always @(posedge clk)
    _98_ <= _97_;
  assign sck_0 = _20_;
  assign sck_1 = _21_;
  assign clk_div = _22_;
  assign sck_send = _23_;
  assign sck_recv = _24_;
  assign cmd_mode = _39_;
  assign oreg = _54_;
  assign dat_i_l = _83_;
  assign dat_ack_l = _95_;
  assign sck_recv_d = _96_;
  assign ireg = _98_;
  assign bit_count = _47_;
  assign next_cmd = _28_;
  assign start_cmd = _29_;
  assign end_cmd = _31_;
  assign state = _40_;
  assign \sck_gen.counter  = _25_;
  assign cmd_ready_o = next_cmd;
  assign d_rxd_o = ireg;
  assign d_ack_o = _94_;
  assign bus_idle_o = _33_;
  assign sck = sck_1;
  assign sdat_o = { oreg[4], oreg[5], oreg[6], oreg[7] };
  assign sdat_oe = { _59_, _65_, _76_, _81_ };
endmodule